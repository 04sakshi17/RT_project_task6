{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saksh\\\\OneDrive\\\\Desktop\\\\task\\\\Chapter06\\\\src\\\\context\\\\ReviewsContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useCallback, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ReviewsContext = /*#__PURE__*/createContext();\nconst initialState = {\n  reviews: [],\n  loading: true,\n  error: ''\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_REVIEWS_SUCCESS':\n      return { ...state,\n        reviews: action.payload,\n        loading: false\n      };\n\n    case 'GET_REVIEWS_ERROR':\n      return { ...state,\n        reviews: [],\n        loading: false,\n        error: action.payload\n      };\n\n    case 'ADD_REVIEW_SUCCESS':\n      return { ...state,\n        reviews: [...state.reviews, action.payload],\n        loading: false,\n        isAdded: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ReviewsContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const fetchReviews = useCallback(async hotelId => {\n    try {\n      const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/hotels/${hotelId}/reviews`);\n      const result = await data.json();\n\n      if (result) {\n        dispatch({\n          type: 'GET_REVIEWS_SUCCESS',\n          payload: result\n        });\n      }\n    } catch (e) {\n      dispatch({\n        type: 'GET_REVIEWS_ERROR',\n        payload: e.message\n      });\n    }\n  }, []);\n  const addReview = useCallback(async _ref2 => {\n    let {\n      hotelId,\n      title,\n      description,\n      rating\n    } = _ref2;\n    const reviewId = Math.floor(Math.random() * 100);\n\n    try {\n      const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/reviews`, {\n        method: 'POST',\n        body: JSON.stringify({\n          id: reviewId,\n          hotelId,\n          title,\n          description,\n          rating\n        })\n      });\n      const result = await data.json();\n\n      if (result) {\n        dispatch({\n          type: 'ADD_REVIEW_SUCCESS',\n          payload: {\n            id: reviewId,\n            hotelId,\n            title,\n            description,\n            rating\n          }\n        });\n      }\n    } catch {}\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ReviewsContext.Provider, {\n    value: { ...state,\n      fetchReviews,\n      addReview\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ReviewsContextProvider, \"4JQLbm/D+82g1OZ6tzlI5TJrLnQ=\");\n\n_c = ReviewsContextProvider;\nexport default ReviewsContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReviewsContextProvider\");","map":{"version":3,"sources":["C:/Users/saksh/OneDrive/Desktop/task/Chapter06/src/context/ReviewsContext.js"],"names":["createContext","useCallback","useReducer","ReviewsContext","initialState","reviews","loading","error","reducer","state","action","type","payload","isAdded","ReviewsContextProvider","children","dispatch","fetchReviews","hotelId","data","fetch","result","json","e","message","addReview","title","description","rating","reviewId","Math","floor","random","method","body","JSON","stringify","id"],"mappings":"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","sourcesContent":["import { createContext, useCallback, useReducer } from 'react';\n\nexport const ReviewsContext = createContext();\n\nconst initialState = {\n  reviews: [],\n  loading: true,\n  error: '',\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_REVIEWS_SUCCESS':\n      return {\n        ...state,\n        reviews: action.payload,\n        loading: false,\n      };\n    case 'GET_REVIEWS_ERROR':\n      return {\n        ...state,\n        reviews: [],\n        loading: false,\n        error: action.payload,\n      };\n    case 'ADD_REVIEW_SUCCESS':\n      return {\n        ...state,\n        reviews: [...state.reviews, action.payload],\n        loading: false,\n        isAdded: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const ReviewsContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchReviews = useCallback(async (hotelId) => {\n    try {\n      const data = await fetch(\n        `https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/hotels/${hotelId}/reviews`,\n      );\n      const result = await data.json();\n\n      if (result) {\n        dispatch({ type: 'GET_REVIEWS_SUCCESS', payload: result });\n      }\n    } catch (e) {\n      dispatch({ type: 'GET_REVIEWS_ERROR', payload: e.message });\n    }\n  }, []);\n\n  const addReview = useCallback(\n    async ({ hotelId, title, description, rating }) => {\n      const reviewId = Math.floor(Math.random() * 100);\n\n      try {\n        const data = await fetch(\n          `https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/reviews`,\n          {\n            method: 'POST',\n            body: JSON.stringify({\n              id: reviewId,\n              hotelId,\n              title,\n              description,\n              rating,\n            }),\n          },\n        );\n        const result = await data.json();\n\n        if (result) {\n          dispatch({\n            type: 'ADD_REVIEW_SUCCESS',\n            payload: {\n              id: reviewId,\n              hotelId,\n              title,\n              description,\n              rating,\n            },\n          });\n        }\n      } catch {}\n    },\n    [],\n  );\n\n  return (\n    <ReviewsContext.Provider value={{ ...state, fetchReviews, addReview }}>\n      {children}\n    </ReviewsContext.Provider>\n  );\n};\n\nexport default ReviewsContext;\n"]},"metadata":{},"sourceType":"module"}